// http://projecteuler.net/problem=2

/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Normally the Fibonacci sequence starts 1, 1, 2, but for this assignment there is only one "1": 1, 2, 3, 5...
Run in Scratchapd in Firefox (Shift+ F4)
*/

// Solution 1 - brute force
var sum = 0, last = 1, current = 1, next, iterations = 0;
while ( current < 4000000 ) {
	if ( current % 2 === 0 ) {
        sum += current;
	}
	next = current + last;
	last = current;
	current = next;
	iterations += 1;
}

alert("The sum is " + sum + ". Iterations: " + iterations);

//Solution 1 - brute force + fancy trick
var sum = 0, last = 1, current = 1, iterations = 0;
while ( current < 4000000 ) {
	if ( current % 2 === 0 ) {
        sum += current;
    }
    // Fancy trick in ES 5 - "destructuring assignment"
    [last, current] = [current, current + last];
    iterations += 1;
}

alert("The sum is " + sum + ". Iterations: " + iterations);

// Fibonacci sequences will always be odd, odd, even - odd, odd, even...
// That means we can move more quickly through the loop
var sum = 0, last = 1, current = 2, iterations = 0;
while ( current < 4000000 ) {
    sum += current;
    [last, current] = [current, current + last];
    [last, current] = [current, current + last];
    [last, current] = [current, current + last];
    iterations += 1;
}

alert("The sum is " + sum + ". Iterations: " + iterations);

// Even more optimized math
var sum = 0, last = 1, current = 2, iterations = 0;
while ( current < 4000000 ) {
    sum += current;
    [last, current] = [last + current * 2, last * 2 + current * 3];
    iterations += 1;
}

alert("The sum is " + sum + ". Iterations: " + iterations);

